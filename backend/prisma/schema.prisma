generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id            String          @id @default(uuid())
  name          String?
  email         String          @unique
  password      String
  role          UserRole        @default(USER)
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  problems      Problem[]
  problemSolved ProblemSolved[]
  submission    Submission[]
  playlists     Playlist[]       
}

model Problem {
  id                 String              @id @default(uuid())
  title              String
  description        String
  difficulty         Difficulty
  tag                String[]           
  userId             String
  examples           Json
  hints              String?
  editorial          String?
  testCases          Json
  codeSnippets       Json
  constraints        String
  referenceSolutions Json
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  solvedBy           ProblemSolved[]
  submission         Submission[]
  problemPlaylists   ProblemInPlayList[] 
}

model Submission {
  id            String           @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  problem       Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  testCases     TestCaseResult[]
}

model TestCaseResult {
  id            String     @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  submission    Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, problemId])
}

model Playlist {
  id          String              @id @default(ulid())
  name        String
  description String?
  userId      String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  problemPlaylists ProblemInPlayList[]  // added relation to ProblemInPlayList

  @@unique([name,userId])  // unique playlist per user
}

model ProblemInPlayList {
  id         String    @id @default(ulid())
  playlistId String
  problemId  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  playlist   Playlist  @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  problem    Problem   @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playlistId, problemId])
}

